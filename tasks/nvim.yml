---
- name: Set nvim path
  ansible.builtin.set_fact:
    nvim_path: "~/.config/nvim"

- name: Set is_ubuntu18_or_debian10 to true
  ansible.builtin.set_fact:
    is_ubuntu18_or_debian10: true
  when: >
    (ansible_facts['distribution'] == "Ubuntu" and
    ansible_facts['distribution_major_version'] == "18") or
    (ansible_facts['distribution'] == "Debian" and
    ansible_facts['distribution_major_version'] == "10")

- name: Set is_ubuntu18_or_debian10 to false
  ansible.builtin.set_fact:
    is_ubuntu18_or_debian10: false
  when: >
    not ((ansible_facts['distribution'] == "Ubuntu" and
    ansible_facts['distribution_major_version'] == "18") or
    (ansible_facts['distribution'] == "Debian" and
    ansible_facts['distribution_major_version'] == "10"))

- name: Install required packages with brew
  homebrew:
    name:
      - nvim
      - curl
      - git
      - llvm
  when:
    ansible_facts['os_family'] == "Darwin"

- name: Install required packages with apt
  ansible.builtin.apt:
    name:
      - curl
      - git
      - python3-pip
      - python3-venv
  become: true
  become_user: root
  when:
    ansible_facts['os_family'] == "Debian"

- name: Install neovim from tarball, unzip tarball
  ansible.builtin.unarchive:
    src:
      "https://github.com/neovim/neovim/releases/download/\
      v0.7.2/nvim-linux64.tar.gz"
    dest: "/home/{{ user_name }}/"
    remote_src: true
  when: is_ubuntu18_or_debian10

- name: Install neovim from tarball, copy nvim to /usr/bin
  ansible.builtin.copy:
    src: "/home/{{ user_name }}/nvim-linux64/bin/nvim"
    dest: "/usr/bin/nvim"
    owner: root
    group: root
    mode: '0555'
    remote_src: true
  become: true
  become_user: root
  when: is_ubuntu18_or_debian10


- name: Install neovim from tarball, copy nvim/share to /usr/share/nvim
  ansible.builtin.copy:
    src: "/home/{{ user_name }}/nvim-linux64/share/nvim/"
    dest: "/usr/share/nvim"
    owner: root
    group: root
    mode: '0555'
    remote_src: true
  become: true
  become_user: root
  when: is_ubuntu18_or_debian10

- name: Install neovim from tarball, copy nvim/lib to /usr/lib/x86_64-linux-gnu
  ansible.builtin.copy:
    src: "/home/{{ user_name }}/nvim-linux64/lib/nvim/"
    dest: "/usr/lib/x86_64-linux-gnu/nvim"
    owner: root
    group: root
    mode: '0555'
    remote_src: true
  become: true
  become_user: root
  when: is_ubuntu18_or_debian10

- name: Install neovim Debian 20.04+
  ansible.builtin.apt:
    deb:
      "https://github.com/neovim/neovim/releases/download/v0.7.2/nvim-linux64.deb"
  become: true
  become_user: root
  when: >
    ansible_facts['os_family'] == "Debian" and
    not is_ubuntu18_or_debian10

- name: Make sure ~/.config/nvim exists
  ansible.builtin.file:
    path: "{{ nvim_path }}"
    state: directory
    owner: "{{ user_name }}"
    group:
      "{{ 'staff' if ansible_facts['os_family'] == 'Darwin'
      else user_name }}"
    mode: 0750

- name: Copy config files
  ansible.builtin.copy:
    src: files/nvim/
    dest: "{{ nvim_path }}/"
    owner: "{{ user_name }}"
    group:
      "{{ 'staff' if ansible_facts['os_family'] == 'Darwin'
      else user_name }}"
    mode: 0750

- name: Install required packages for nvim plugins, Mac
  homebrew:
    name:
      - ripgrep
      - nodejs
      - yarn
  when:
    ansible_facts['os_family'] == "Darwin"

- name: Install ripgrep, Ubuntu 18.10+
  ansible.builtin.apt:
    name:
      - ripgrep
  become: true
  become_user: root
  when:
    ansible_facts['os_family'] == "Debian" and
    not is_ubuntu18_or_debian10

- name: Install ripgrep, Ubuntu 18.04
  ansible.builtin.apt:
    deb:
      "https://github.com/BurntSushi/ripgrep/releases/download/13.0.0/ripgrep_13.0.0_amd64.deb"
  become: true
  become_user: root
  when: is_ubuntu18_or_debian10

- name: Install reuired packages for nvim plugins
  ansible.builtin.apt:
    name:
      - cmake
      - make
      - gcc
      - nodejs
      - yarn
      - npm
      - unzip
  become: true
  become_user: root
  when:
    ansible_facts['os_family'] == "Debian"

- name: Install python, ansible, yaml linter and formatter
  ansible.builtin.pip:
    name:
      - yamllint
      - ansible-lint
      - pydocstyle

- name: Install eslint
  community.general.npm:
    name: eslint
    global: true
  become: true
  become_user: root
  when: not is_ubuntu18_or_debian10

# - name: Check if rustup is installed
#   ansible.builtin.command: which rustup
#   changed_when: false
#   failed_when: false
#   register: rustup_installed
#
# - name: Install rustup
#   ansible.builtin.shell: |
#     set -o pipefail && curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs
#     | sh -s -- -y
#   when: rustup_installed.rc != 0
#
# - name: Install linters, formatters with cargo
#   community.general.cargo:
#     name: stylua

- name: Install lazygit, Mac
  homebrew:
    name: lazygit
  when:
    ansible_facts['os_family'] == "Darwin"

- name: Install lazygit, Debian
  ansible.builtin.unarchive:
    src:
      "https://github.com/jesseduffield/lazygit/releases/download/v0.35/lazygit_0.35_Linux_x86_64.tar.gz"
    dest: /usr/local/bin/
    remote_src: true
  become: true
  become_user: root
  when:
    ansible_facts['os_family'] == "Debian"

- name: Install cppcheck Macos
  homebrew:
    name:
      - cppcheck
  when:
    ansible_facts['os_family'] == "Darwin"

- name: Install cppcheck
  ansible.builtin.apt:
    name:
      - cppcheck
  become: true
  become_user: root
  when:
    ansible_facts['os_family'] == "Debian"
